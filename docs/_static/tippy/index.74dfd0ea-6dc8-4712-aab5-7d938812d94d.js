selector_to_html = {"a[href=\"#docker-compose\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">6.Docker Compose<a class=\"headerlink\" href=\"#docker-compose\" title=\"Link to this heading\">\u00b6</a></h1><p>Docker Compose is a tool for defining and running multi-container applications. It allows you to define the services, networks, and volumes that make up your application in a single, human-readable YAML file. Docker Compose simplifies the process of managing complex applications by providing a unified way to configure, start, and stop multiple containers.</p><p><strong>Defining Multi-Container Applications with docker-compose.yml:</strong></p>", "a[href=\"#container-management\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">5.Container Management<a class=\"headerlink\" href=\"#container-management\" title=\"Link to this heading\">\u00b6</a></h1><p>Managing containers effectively is essential to leverage the benefits of Docker. This section covers the container lifecycle, Docker run options for configuration, and techniques for working with multiple containers.</p>", "a[href=\"#containerizing-applications\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">14.Containerizing Applications<a class=\"headerlink\" href=\"#containerizing-applications\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#installation-and-setup\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">2.Installation and Setup<a class=\"headerlink\" href=\"#installation-and-setup\" title=\"Link to this heading\">\u00b6</a></h1><p>Installing Docker involves setting up the Docker Engine, which includes the Docker CLI (Command Line Interface) and the Docker Daemon (server). Here\u2019s a detailed guide on how to install Docker on Linux, macOS, and Windows, along with basic configuration and settings.</p><p><strong>i.Installing Docker on Linux:</strong></p>", "a[href=\"#troubleshooting-and-debugging\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">16.Troubleshooting and Debugging<a class=\"headerlink\" href=\"#troubleshooting-and-debugging\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#monitoring-and-logging\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">15.Monitoring and Logging<a class=\"headerlink\" href=\"#monitoring-and-logging\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#welcome-to-cm-s-devops-documentation\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Welcome to CM\u2019s DevOps documentation!<a class=\"headerlink\" href=\"#welcome-to-cm-s-devops-documentation\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#docker-basics\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">3.Docker Basics<a class=\"headerlink\" href=\"#docker-basics\" title=\"Link to this heading\">\u00b6</a></h1><p>Understanding the fundamental concepts of Docker is crucial for effectively working with containers. This section will delve into the core components of Docker, how to run your first container, essential Docker commands, and the role of Docker registry and Docker Hub.</p><p><strong>i.    Docker Engine Components:</strong>\nDocker Engine is the core of the Docker platform, responsible for building, running, and managing containers. It consists of two main components:</p>", "a[href=\"#docker-swarm-and-orchestration\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">13.Docker Swarm and Orchestration<a class=\"headerlink\" href=\"#docker-swarm-and-orchestration\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#docker-security\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">10.Docker Security<a class=\"headerlink\" href=\"#docker-security\" title=\"Link to this heading\">\u00b6</a></h1><p>Ensuring the security of Docker containers is paramount to safeguarding your applications and data. This section explores Docker\u2019s security features, best practices for securing containers, vulnerability scanning, and advancements in user namespaces and rootless Docker for enhanced security.</p><p><strong>Container Isolation and Security Features:</strong></p>", "a[href=\"#case-studies-and-real-world-examples\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">20.Case Studies and Real-World Examples<a class=\"headerlink\" href=\"#case-studies-and-real-world-examples\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#advanced-image-techniques\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">7.Advanced Image Techniques<a class=\"headerlink\" href=\"#advanced-image-techniques\" title=\"Link to this heading\">\u00b6</a></h1><p>As you delve deeper into Docker, you\u2019ll encounter advanced techniques that allow you to optimize your Docker images for efficiency, security, and maintainability. This section covers multi-stage builds, optimizing image size, image tagging and versioning, and pushing/pulling images from Docker Hub.</p><p><strong>1.Using Multi-Stage Builds:</strong></p>", "a[href=\"#continuous-integration-and-deployment-ci-cd-with-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">17.Continuous Integration and Deployment (CI/CD) with Docker<a class=\"headerlink\" href=\"#continuous-integration-and-deployment-ci-cd-with-docker\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#docker-compose-in-depth\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">12.Docker Compose in Depth<a class=\"headerlink\" href=\"#docker-compose-in-depth\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#data-management-with-volumes\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">9.Data Management with Volumes<a class=\"headerlink\" href=\"#data-management-with-volumes\" title=\"Link to this heading\">\u00b6</a></h1><p>Managing data within Docker containers is a challenge due to the ephemeral nature of containers. Docker volumes provide a solution by enabling persistent data storage and sharing between containers and the host system. This section explains Docker volumes, the differences between bind mounts and volumes, and how volumes facilitate persistent data storage.</p><p><strong>Introduction to Docker Volumes:</strong></p>", "a[href=\"#indices-and-tables\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">Indices and tables<a class=\"headerlink\" href=\"#indices-and-tables\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#docker-ecosystem-tools\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">18.Docker Ecosystem Tools<a class=\"headerlink\" href=\"#docker-ecosystem-tools\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#creating-docker-images\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">4.Creating Docker Images<a class=\"headerlink\" href=\"#creating-docker-images\" title=\"Link to this heading\">\u00b6</a></h1><p>Creating Docker images is a fundamental skill in the Docker ecosystem. Images serve as blueprints for containers, encapsulating an application\u2019s code, dependencies, and configuration. This section will cover creating images using Dockerfiles, understanding Dockerfile syntax, best practices, building images, and the concepts of image layers and caching.</p><p><strong>1.Introduction to Dockerfile:</strong></p>", "a[href=\"#dockerfile-best-practices\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">11.Dockerfile Best Practices<a class=\"headerlink\" href=\"#dockerfile-best-practices\" title=\"Link to this heading\">\u00b6</a></h1>", "a[href=\"#networking-in-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">8.Networking in Docker<a class=\"headerlink\" href=\"#networking-in-docker\" title=\"Link to this heading\">\u00b6</a></h1><p>Networking is a crucial aspect of containerization, allowing containers to communicate with each other and external systems. Docker provides various networking modes and features to manage container networking efficiently. This section covers Docker\u2019s networking modes, creating user-defined networks, and utilizing network aliases for DNS resolution.</p><p><strong>Docker Networking Modes:</strong></p>", "a[href=\"#introduction-to-containers-and-docker\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">1.Introduction to Containers and Docker<a class=\"headerlink\" href=\"#introduction-to-containers-and-docker\" title=\"Link to this heading\">\u00b6</a></h1><p>Containerization is a technology that allows you to package an application and its dependencies into a standardized unit called a container. Containers provide a consistent runtime environment, ensuring that the application runs the same way across different environments, be it development, testing, or production. Docker is a leading platform that enables containerization, revolutionizing the way applications are developed, deployed, and managed.</p>", "a[href=\"#docker-and-cloud-platforms\"]": "<h1 class=\"tippy-header\" style=\"margin-top: 0;\">19.Docker and Cloud Platforms<a class=\"headerlink\" href=\"#docker-and-cloud-platforms\" title=\"Link to this heading\">\u00b6</a></h1>"}
skip_classes = ["headerlink", "sd-stretched-link"]

window.onload = function () {
    for (const [select, tip_html] of Object.entries(selector_to_html)) {
        const links = document.querySelectorAll(` ${select}`);
        for (const link of links) {
            if (skip_classes.some(c => link.classList.contains(c))) {
                continue;
            }

            tippy(link, {
                content: tip_html,
                allowHTML: true,
                arrow: true,
                placement: 'auto-start', maxWidth: 500, interactive: false,

            });
        };
    };
    console.log("tippy tips loaded!");
};
